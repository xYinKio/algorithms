package linkedLists.cyclicLists

/**
 * В списках с циклами поле next последнего элемента указывает на какой-либо из предыдущих элементов.
 *
 * Обнаружение циклов:
 *  1. Маркировка ячеек. O(N)
 *      - выделяем поле visited в ячейке по умолчанию false
 *      - проходим по списку, если до конца false - цикла нет, если нашли true - цикл есть.
 *      - восстанавливаем изначальное значение false
 *  2. Хеш таблицы O(N)
 *      - проходя по списку на каждой итерации спрашиваем у хеш-таблицы, есть ли у неё такой-то элемент.
 *      - Если есть, цикл есть, инача - нет
 *  3. Повторная трассировка O(N ^ 2)
 *      - Проходимся по списку и на каждой итерации спрашиваем у каждого элемента,
 *          ссылается ли он на текущий. Если ссылается, возвращаем true, если не нешли такого - false
 *  4. Реверсирование списка O (N)
 *      - Реверсируем ссылки, возвращаем последний пройденный элемент.
 *      - если он тот же, что и первый, то цикл есть.
 *      - Снова Реверсируем список для восстановления структуры
 *  5. Черепаха и кролик
 *      - Пускаем по списку кролика со скоростью 2 элемента и черепаху со скоростью 1 элемент
 *      - Если кролик найдёт null, то цикла нет
 *      - Если кролик догонит черепаху, то цикл есть
 *      Дополнительно:
 *      Для получение начального и конечного элемента цикла, а также прерывания цикла
 *      - Перезапускаем кролика с начала списка, черепаха продолжает двигаться
 *      - Когда кролик снова найдёт черепаху, они будут в начале цикла
 *      - Останавливаем кролика и ждём черепаху
 *      - Когда черепаха увидит кролика - это будет конец цикла
 *      - Указатель черепахи next инициализируем null
 *
 * */